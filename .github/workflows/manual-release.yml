name: Build and Release

permissions:
  contents: write # This gives permission to create releases

on:
  workflow_dispatch:
    inputs:
      release_notes:
        description: "Release notes"
        required: 
  push:
    tags:
      - "v*.*.*"
      - "version:*.*.*"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install vsce
        run: npm install -g @vscode/vsce

      - name: Get version from package.json
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build extension
        run: npm run package-extension

      - name: List files after build
        run: find . -name "*.vsix" | sort

      - name: Extract tag name (for tag-based release)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        id: extract_tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ $TAG == version:* ]]; then
            VERSION=${TAG#version:}
          else
            VERSION=${TAG#v}
          fi
          echo "tag_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set release version
        id: release_version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "version=${{ steps.extract_tag.outputs.tag_version }}" >> $GITHUB_OUTPUT
            VERSION="${{ steps.extract_tag.outputs.tag_version }}"
          else
            echo "version=${{ steps.package_version.outputs.version }}" >> $GITHUB_OUTPUT
            VERSION="${{ steps.package_version.outputs.version }}"
          fi
          
          # Extract release notes from CHANGELOG.md for the current version
          if [[ -f "CHANGELOG.md" ]]; then
            # Create a temporary file to store the notes
            NOTES_FILE=$(mktemp)
            
            # Find the section for current version and extract all content until the next version or end of file
            VERSION_REGEX="## \[?${VERSION}\]?"
            NEXT_VERSION_REGEX="## \[?"
            
            # Use awk to extract the content between the current version and the next version header
            awk -v version_regex="$VERSION_REGEX" -v next_regex="$NEXT_VERSION_REGEX" '
              BEGIN { found=0; }
              $0 ~ version_regex { found=1; next; }
              found==1 && $0 ~ next_regex { found=0; next; }
              found==1 { print $0; }
            ' CHANGELOG.md > "$NOTES_FILE"
            
            # If we found release notes, use them
            if [[ -s "$NOTES_FILE" ]]; then
              echo "notes<<EOF" >> $GITHUB_OUTPUT
              cat "$NOTES_FILE" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              # Fallback if no notes found in CHANGELOG
              if [[ "${{ github.event_name }}" == "push" ]]; then
                echo "notes=Release ${{ steps.extract_tag.outputs.tag_version }}" >> $GITHUB_OUTPUT
              else
                echo "notes=${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
              fi
            fi
            
            # Clean up temp file
            rm "$NOTES_FILE"
          else
            # Fallback if no CHANGELOG.md exists
            if [[ "${{ github.event_name }}" == "push" ]]; then
              echo "notes=Release ${{ steps.extract_tag.outputs.tag_version }}" >> $GITHUB_OUTPUT
            else
              echo "notes=${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: List files after setting release version
        run: find . -name "*.vsix" | sort

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.release_version.outputs.version }}
          name: Release v${{ steps.release_version.outputs.version }}
          body: ${{ steps.release_version.outputs.notes }}
          draft: false
          prerelease: false
          files: |
            ./*.vsix
            **/*.vsix